$rem-base: 16px !default;


@font-face {
	font-family: 'djn';
	src:url('../fonts/djn.eot?7kgvwy');
	src:url('../fonts/djn.eot?#iefix7kgvwy') format('embedded-opentype'),
		url('../fonts/djn.woff?7kgvwy') format('woff'),
		url('../fonts/djn.ttf?7kgvwy') format('truetype'),
		url('../fonts/djn.svg?7kgvwy#djn') format('svg');
	font-weight: normal;
	font-style: normal;
}
[class^='djn-'], [class*=' djn-'] {
	font-family: 'djn';
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}
.djn-checkmark:before {
	content: '\e600';
}
.djn-info:before {
	content: '\e601';
}
.djn-profile:before {
	content: '\e040';
}
.djn-pin:before {
	content: '\e047';
}
.djn-chat:before {
	content: '\e049';
}



/*  M I X I N S
=============================================================*/
// use Sass' built-in version: rgba(your_color, your_alpha)
		@function black($opacity){ @return rgba(0,0,0,$opacity); }
		@function white($opacity){ @return rgba(255,255,255,$opacity); }
// Code box effect (.1, .1)
@mixin inset($opacity, $opacity2){
  box-shadow:inset 0 2px 3px black($opacity), 0 1px 0 white($opacity2);
}
// Pressed letter effect (.1, .4)
@mixin press($opacity, $opacity2){
  text-shadow: -1px -1px 0 black($opacity), 1px 1px 0 white($opacity2);
}
// Pressed line divider effect
@mixin border-shine($color){
  border-bottom:1px solid ($color); box-shadow: 0 1px white(.1);
}

@mixin box-sizing($type:border-box) {
  @if $experimental {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
  }
  box-sizing: $type;
}

@mixin clearfix {
    *zoom:1;
    &:before, &:after { content:''; display: table; }
    &:after { clear: both; }
}

@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content:'';
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}




/*  F U N C T I O N S
=============================================================*/
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}



/*  G L O B A L S
=============================================================*/
$experimental: true !default;
$base-font-size: 100% !default;
$base-line-height: 150% !default;

$body-bg: #fff !default;
$body-font-color: #222 !default;
$body-font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif !default;
$body-font-weight: normal !default;
$body-font-style: normal !default;
$font-smoothing: antialiased !default;
$text-direction: ltr !default;

$default-float: left !global;
$opposite-direction: right !default;
@if $text-direction == ltr {
  $default-float: left !global;
  $opposite-direction: right !global;
} @else {
  $default-float: right !global;
  $opposite-direction: left !global;
}

$cursor-crosshair-value: crosshair !default;
$cursor-default-value: default !default;
$cursor-pointer-value: pointer !default;
$cursor-help-value: help !default;
$cursor-text-value: text !default;

$global-radius: 3px !default;
$global-rounded: 1000px !default;
$include-html-classes: true !default;
$include-print-styles: true !default;
$include-html-global-classes: $include-html-classes !default;

@if $include-html-global-classes {
  *,
  *:before,
  *:after {
    @include box-sizing(border-box);
  }
  html, body { font-size: $base-font-size; }
  body {
    background: $body-bg; color: $body-font-color;
    padding: 0; margin: 0;
    font-family: $body-font-family;
    font-weight: $body-font-weight;
    font-style: $body-font-style;
    line-height: 1; 
    position: relative;
    cursor: $cursor-default-value;
  }
  a:hover { cursor: $cursor-pointer-value; }
  img, object, embed { max-width: 100%; height: auto; }
  object, embed { height: 100%; }
  img { -ms-interpolation-mode: bicubic; }
  #map_canvas,
  .map_canvas {
    img, embed, object { max-width: none !important; }
  }
  .left { float: left !important; }
  .right { float: right !important; }
  .clearfix { @include clearfix; }
  .text-left    { text-align: left !important; }
  .text-right   { text-align: right !important; }
  .text-center  { text-align: center !important; }
  .text-justify { text-align: justify !important; }
  .hide         { 
    text-indent: -9999px; visibility: hidden; display: none;
  }
  .antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
  img { display: inline-block; vertical-align: middle; }
  textarea { height: auto; min-height: 50px; }
  select { width: 100%; }
  hr {
    border-style:none; height:1px; width:90%; margin:2rem auto; 
    background: linear-gradient(to right,white(0),lightblue,white(0));
  }
}



/*  Media Queries
------------------------------------------------------------*/
$xs-range: (0em, 36em) !default;
$sm-range: (36.063em, 64em) !default;
$md-range: (64.063em, 90em) !default;
$lg-range: (90.063em, 120em) !default;
$xl-range: (120.063em) !default;
 
$screen: 'only screen' !default;
$landscape: '#{$screen} and (orientation: landscape)' !default;
$portrait: '#{$screen} and (orientation: portrait)' !default;
$mobile: '#{$screen} and (max-width: #{upper-bound($sm-range)})' !default;
$xs: $screen !default;
$xs-only: '#{$screen} and (max-width: #{upper-bound($xs-range)})' !default;
$sm: '#{$screen} and (min-width:#{lower-bound($sm-range)})' !default;
$sm-only: '#{$screen} and (min-width:#{lower-bound($sm-range)}) and (max-width:#{upper-bound($sm-range)})' !default;
$md: '#{$screen} and (min-width:#{lower-bound($md-range)})' !default;
$md-only: '#{$screen} and (min-width:#{lower-bound($md-range)}) and (max-width:#{upper-bound($md-range)})' !default;
$lg: '#{$screen} and (min-width:#{lower-bound($lg-range)})' !default;
$lg-only: '#{$screen} and (min-width:#{lower-bound($lg-range)}) and (max-width:#{upper-bound($lg-range)})' !default;
$xl: '#{$screen} and (min-width:#{lower-bound($xl-range)})' !default;
$xl-only: '#{$screen} and (min-width:#{lower-bound($xl)}) and (max-width:#{upper-bound($xl-range)})' !default;



/*  G R I D
=============================================================*/
$include-html-grid-classes: $include-html-classes !default;
$row-width: rem-calc(1300) !default; // go big or go home!
$column-gutter: rem-calc(30) !default;
$total-columns: 12 !default;

@function gridCalc($colNumber, $totalColumns) {
  @warn 'gridCalc() is deprecated, use grid-calc()';
  @return grid-calc($colNumber, $totalColumns);
}

@function grid-calc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

@mixin grid-column(
  $columns:false, 
  $last-column:false, 
  $center:false, 
  $offset:false, 
  $push:false, 
  $pull:false, 
  $collapse:false, 
  $float:true) {
  position: relative;

  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

  @else if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  @if $columns {
    width: grid-calc($columns, $total-columns);
    @if $last-column { float: $opposite-direction; }
  }

  @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none;
  }

  @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }

}

@mixin grid-html-classes($size) {
  .column.#{$size}-centered,
  .columns.#{$size}-centered { @include grid-column($center:true, $collapse:null, $float:false); }
  .column.#{$size}-uncentered,
  .columns.#{$size}-uncentered {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    float: $default-float;
  }
  .column.#{$size}-uncentered.opposite,
  .columns.#{$size}-uncentered.opposite {
    float: $opposite-direction;
  }

  @for $i from 1 through $total-columns - 1 {
    .#{$size}-push#{$i} {
      @include grid-column($push:$i, $collapse:null, $float:false);
    }
    .#{$size}-pull#{$i} {
      @include grid-column($pull:$i, $collapse:null, $float:false);
    }
  }

  .column,
  .columns { @include grid-column($columns:false); }
  @for $i from 1 through $total-columns {
    .#{$size}#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
  }
  [class*='column'] + [class*='column']:last-child { float: $opposite-direction; }
  [class*='column'] + [class*='column'].end { float: $default-float; }
  @for $i from 0 through $total-columns - 2 {
    .#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
  }
}

@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }

  // Clearfix for all rows
  @include clearfix();
}

@if $include-html-grid-classes {
  .row {
    @include grid-row;
    &.collapse {
       > .column,
       > .columns { @include grid-column($collapse:true); }
      .row {margin-left:0; margin-right:0;}
    }
    .row { @include grid-row($behavior:nest);
      &.collapse { @include grid-row($behavior:nest-collapse); }
    }
  }
  .column,
  .columns { @include grid-column($columns:$total-columns); }
  @media #{$xs} {
    @include grid-html-classes($size:xs);
  }
  @media #{$sm} {
    @include grid-html-classes($size:sm);
    @for $i from 1 through $total-columns - 1 {
      .push#{$i} {
        @include grid-column($push:$i, $collapse:null, $float:false);
      }
      .pull#{$i} {
        @include grid-column($pull:$i, $collapse:null, $float:false);
      }
    }
  }
  @media #{$md} {
    @include grid-html-classes($size:md);
  }
  @media #{$lg} {
    @include grid-html-classes($size:lg);
  }
  @media #{$xl} {
    @include grid-html-classes($size:xl);
  }
}
